 pipeline {
    agent any
    
    stages{
    stage('Deploy to ECS') {
            steps {
                // Check the image tag (latest commit ID)
                script {
                    def latestCommitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    def imageTag = sh(script: 'aws ecr describe-images --repository-name todo --region us-west-1 --query \'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]\' --output text', returnStdout: true).trim()
                    echo "$imageTag"
                    if ("${latestCommitId}" == "${imageTag}") {
                        // Manual approval for deployment
                        def deploymentApproval = input(
                            id: 'deploymentApproval',
                            message: "Proceed with deployment of image ${imageTag} to ECS? (yes/no)",
                            parameters: [choice(choices: ['yes', 'no'], description: 'Choose yes or no', name: 'Approval')]
                        )

                        if (deploymentApproval == 'yes') {
                            echo "Deployment approved. Proceeding with deployment of image ${imageTag} to ECS..."
                           
                        // Implement deployment to ECS here
                             def taskDefinitionJson = readFile('taskdefinition.json')
                            
                        // Register the task definition
                             def registerTaskOutput = sh(
                             script: """
                             aws ecs register-task-definition --region us-west-1 --cli-input-json '${taskDefinitionJson}'
                             """, returnStdout: true).trim()
                             echo "Register Task Output: ${registerTaskOutput}"

                             def taskDefinitionArn = sh(
                             script: """
                             echo '${registerTaskOutput}' | grep -oP '(?<="taskDefinitionArn": ")[^"]+'
                             """, returnStdout: true).trim()

                             def revisionNumber = taskDefinitionArn.tokenize(':')[-1]
                             echo "Task Definition Revision Number: ${revisionNumber}"

                             
                        // Updating the service
                             sh "aws ecs update-service --region us-west-1 --cluster todo --service todo-service --task-definition todo-task:${revisionNumber}"

                        } 
                        else {
                            error 'Deployment not approved. Stopping the pipeline.'
                        }
                    } 
                    else {
                        echo "Image tag (${imageTag}) does not match the latest commit ID (${latestCommitId}). Skipping deployment."
                    }
                }
            }
     }   
  }
}
